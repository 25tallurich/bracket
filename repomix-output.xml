This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    globals.css
    layout.tsx
    page.tsx
.gitignore
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="package.json">
{
  "name": "bracket",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.525.0",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/app/page.tsx">
"use client"
import React, { useState, useEffect } from 'react';
import { ChevronRight, Trophy, Users, Shuffle, Play, X, Plus } from 'lucide-react';

const TournamentBracket = () => {
  const [participants, setParticipants] = useState([]);
  const [bracket, setBracket] = useState([]);
  const [currentInput, setCurrentInput] = useState('');
  const [isSetupComplete, setIsSetupComplete] = useState(false);
  const [currentRound, setCurrentRound] = useState(0);

  // Get next power of 2
  const getNextPowerOfTwo = (n) => {
    return Math.pow(2, Math.ceil(Math.log2(n)));
  };

  // Initialize bracket structure with proper BYE handling
  const initializeBracket = (players) => {
    const rounds = [];
    const nextPowerOfTwo = getNextPowerOfTwo(players.length);
    
    // Create first round with BYEs if needed
    let currentRoundPlayers = [...players];
    const byesNeeded = nextPowerOfTwo - players.length;
    
    // Add BYEs to make it a perfect power of 2
    for (let i = 0; i < byesNeeded; i++) {
      currentRoundPlayers.push('BYE');
    }
    
    while (currentRoundPlayers.length > 1) {
      const matches = [];
      for (let i = 0; i < currentRoundPlayers.length; i += 2) {
        const player1 = currentRoundPlayers[i];
        const player2 = currentRoundPlayers[i + 1];
        
        const match = {
          id: `match-${rounds.length}-${i/2}`,
          player1: player1,
          player2: player2,
          winner: null,
          completed: false,
          isBye: player1 === 'BYE' || player2 === 'BYE'
        };
        
        // Auto-advance for BYE matches
        if (match.isBye) {
          match.winner = player1 === 'BYE' ? player2 : player1;
          match.completed = true;
        }
        
        matches.push(match);
      }
      rounds.push(matches);
      
      // Prepare next round players
      currentRoundPlayers = matches.map(match => match.winner || null);
    }
    
    return rounds;
  };

  // Shuffle array function
  const shuffleArray = (array) => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  // Add participant
  const addParticipant = () => {
    if (currentInput.trim() && !participants.includes(currentInput.trim())) {
      setParticipants([...participants, currentInput.trim()]);
      setCurrentInput('');
    }
  };

  // Remove participant
  const removeParticipant = (index) => {
    setParticipants(participants.filter((_, i) => i !== index));
  };

  // Start tournament
  const startTournament = () => {
    if (participants.length < 2) return;
    
    // Remove any existing BYE entries and randomize
    const realPlayers = participants.filter(p => p !== 'BYE');
    const shuffledPlayers = shuffleArray(realPlayers);
    const newBracket = initializeBracket(shuffledPlayers);
    
    setBracket(newBracket);
    setCurrentRound(0);
    setIsSetupComplete(true);
  };

  // Select winner
  const selectWinner = (roundIndex, matchIndex, winner) => {
    const newBracket = [...bracket];
    const match = newBracket[roundIndex][matchIndex];
    
    // Don't allow selection for BYE matches or if winner is BYE
    if (match.isBye || winner === 'BYE') return;
    
    match.winner = winner;
    match.completed = true;
    
    // Update next round
    if (roundIndex + 1 < newBracket.length) {
      const nextRoundMatchIndex = Math.floor(matchIndex / 2);
      const isFirstPlayer = matchIndex % 2 === 0;
      
      if (isFirstPlayer) {
        newBracket[roundIndex + 1][nextRoundMatchIndex].player1 = winner;
      } else {
        newBracket[roundIndex + 1][nextRoundMatchIndex].player2 = winner;
      }
    }
    
    setBracket(newBracket);
    
    // Check if round is complete
    const roundComplete = newBracket[roundIndex].every(match => match.completed);
    if (roundComplete && roundIndex + 1 < newBracket.length) {
      setCurrentRound(roundIndex + 1);
    }
  };

  // Reset tournament
  const resetTournament = () => {
    setIsSetupComplete(false);
    setBracket([]);
    setCurrentRound(0);
  };

  // Get round name
  const getRoundName = (roundIndex, totalRounds) => {
    if (roundIndex === totalRounds - 1) return 'Final';
    if (roundIndex === totalRounds - 2) return 'Semi-Final';
    if (roundIndex === totalRounds - 3) return 'Quarter-Final';
    return `Round ${roundIndex + 1}`;
  };

  // Check if tournament is complete
  const isTournamentComplete = () => {
    return bracket.length > 0 && bracket[bracket.length - 1][0]?.completed;
  };

  const champion = isTournamentComplete() ? bracket[bracket.length - 1][0].winner : null;

  // Setup page
  if (!isSetupComplete) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-12">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-lg mb-6">
              <Trophy className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-5xl font-bold text-gray-800 mb-3">Tournament Bracket</h1>
            <p className="text-xl text-gray-600">Create your championship journey</p>
          </div>
          
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-6 border border-gray-100">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Add Participants</h2>
            <div className="flex gap-3 mb-6">
              <input
                type="text"
                value={currentInput}
                onChange={(e) => setCurrentInput(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && addParticipant()}
                placeholder="Enter participant name"
                className="flex-1 px-4 py-3 text-gray-900 placeholder-gray-500 bg-white border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
              <button
                onClick={addParticipant}
                className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all shadow-md hover:shadow-lg flex items-center gap-2"
              >
                <Plus className="w-5 h-5" />
                Add
              </button>
            </div>
            
            <div className="space-y-2 mb-8 max-h-96 overflow-y-auto">
              {participants.map((participant, index) => (
                <div key={index} className="flex items-center justify-between bg-gradient-to-r from-gray-50 to-gray-100 p-4 rounded-xl hover:from-gray-100 hover:to-gray-200 transition-all group">
                  <span className="font-medium text-gray-800">{participant}</span>
                  <button
                    onClick={() => removeParticipant(index)}
                    className="text-red-400 hover:text-red-600 opacity-0 group-hover:opacity-100 transition-all"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
              ))}
              {participants.length === 0 && (
                <div className="text-center py-12 text-gray-400">
                  <Users className="w-16 h-16 mx-auto mb-4 opacity-30" />
                  <p>No participants yet. Add some players to get started!</p>
                </div>
              )}
            </div>
            
            <div className="flex items-center justify-between pt-6 border-t border-gray-200">
              <div className="flex items-center gap-3 text-gray-600">
                <div className="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-full">
                  <Users className="w-5 h-5 text-blue-600" />
                </div>
                <span className="font-medium">{participants.length} participants</span>
              </div>
              
              <button
                onClick={startTournament}
                disabled={participants.length < 2}
                className="flex items-center gap-3 px-8 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl hover:from-green-600 hover:to-emerald-700 disabled:from-gray-300 disabled:to-gray-400 disabled:cursor-not-allowed transition-all shadow-md hover:shadow-lg disabled:shadow-none"
              >
                <Shuffle className="w-5 h-5" />
                Start Tournament
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Bracket view
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-full mx-auto">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-lg mb-4">
            <Trophy className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Tournament Bracket</h1>
          <button
            onClick={resetTournament}
            className="px-6 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl hover:from-gray-600 hover:to-gray-700 transition-all shadow-md hover:shadow-lg"
          >
            Reset Tournament
          </button>
        </div>

        {champion && (
          <div className="text-center mb-8">
            <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 text-white p-8 rounded-2xl shadow-2xl max-w-md mx-auto transform hover:scale-105 transition-transform">
              <Trophy className="w-20 h-20 mx-auto mb-4 animate-bounce" />
              <h2 className="text-3xl font-bold mb-3">🎉 Champion! 🎉</h2>
              <p className="text-2xl font-bold">{champion}</p>
            </div>
          </div>
        )}

        <div className="bg-white rounded-2xl shadow-xl p-8 overflow-x-auto border border-gray-100">
          <div className="flex items-stretch gap-8 min-w-max">
            {bracket.map((round, roundIndex) => (
              <div key={roundIndex} className="flex flex-col">
                <h3 className="text-xl font-bold text-center mb-6 text-gray-700">
                  {getRoundName(roundIndex, bracket.length)}
                </h3>
                
                <div className="flex flex-col justify-around flex-1 gap-4">
                  {round.map((match, matchIndex) => (
                    <div
                      key={match.id}
                      className={`relative rounded-xl overflow-hidden transition-all duration-300 shadow-lg hover:shadow-xl w-72 ${
                        match.completed
                          ? match.isBye
                            ? 'bg-gradient-to-r from-yellow-100 to-orange-100 border-2 border-yellow-300'
                            : 'bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-300'
                          : roundIndex === currentRound
                          ? 'bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-300'
                          : 'bg-white border-2 border-gray-200'
                      }`}
                    >
                      {match.isBye ? (
                        <div className="p-6 text-center">
                          <div className="text-xl font-bold text-yellow-700 mb-2">
                            {match.winner}
                          </div>
                          <div className="text-sm text-yellow-600 bg-yellow-200 px-4 py-1 rounded-full inline-block">
                            Advances (Bye)
                          </div>
                        </div>
                      ) : (
                        <div>
                          {match.player1 && match.player1 !== 'BYE' && (
                            <button
                              onClick={() => !match.completed && selectWinner(roundIndex, matchIndex, match.player1)}
                              disabled={match.completed || !match.player2 || match.player2 === 'BYE'}
                              className={`w-full px-6 py-4 text-left transition-all duration-200 border-b border-gray-200 ${
                                match.winner === match.player1
                                  ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white font-bold'
                                  : match.completed
                                  ? 'bg-gray-100 text-gray-400'
                                  : 'hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer text-gray-800'
                              }`}
                            >
                              <div className="flex items-center justify-between">
                                <span>{match.player1}</span>
                                {match.winner === match.player1 && (
                                  <Trophy className="w-5 h-5" />
                                )}
                              </div>
                            </button>
                          )}
                          
                          {match.player2 && match.player2 !== 'BYE' && (
                            <button
                              onClick={() => !match.completed && selectWinner(roundIndex, matchIndex, match.player2)}
                              disabled={match.completed || !match.player1 || match.player1 === 'BYE'}
                              className={`w-full px-6 py-4 text-left transition-all duration-200 ${
                                match.winner === match.player2
                                  ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white font-bold'
                                  : match.completed
                                  ? 'bg-gray-100 text-gray-400'
                                  : 'hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer text-gray-800'
                              }`}
                            >
                              <div className="flex items-center justify-between">
                                <span>{match.player2}</span>
                                {match.winner === match.player2 && (
                                  <Trophy className="w-5 h-5" />
                                )}
                              </div>
                            </button>
                          )}
                          
                          {(!match.player1 || match.player1 === 'BYE') && (!match.player2 || match.player2 === 'BYE') && (
                            <div className="px-6 py-8 text-center text-gray-400">
                              Waiting for players...
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TournamentBracket;
</file>

</files>
